(***************************************************************************)
(* This module specifies the solution to the following puzzle, given on    *)
(* the Car Guys NPR radio show:                                            *)
(*                                                                         *)
(*    The warden of a prison gives his prisoners the following problem.    *)
(*    There is a room in the prison with two switches, labeled A and B.    *)
(*    Each switch can be either up or down.  Every so often, the warden    *)
(*    will select a prisoner at random and take him into the room, where   *)
(*    he must flip (change the position of) exactly one of the switches.   *)
(*    The only guarantee he makes is that every prisoner will eventually   *)
(*    be brought into the room multiple times.  (More precisely, there     *)
(*    will never be a time after which some prisoner is never again        *)
(*    brought into the room.)                                              *)
(*                                                                         *)
(*    At any time, any prisoner may declare that all the prisoners have    *)
(*    been in the room at least once.  If that prisoner is right, then     *)
(*    all the prisoners go free.  If he is wrong, all the prisoners are    *)
(*    immediately executed.                                                *)
(*                                                                         *)
(*    The prisoners are allowed to decide upon a strategy, after which     *)
(*    they will not be allowed to communicate with one another.  And, of   *)
(*    course, they cannot see the room or who is being brought into it.    *)
(*    What do they do?                                                     *)
(*                                                                         *)
(* The solution presented by the Car Guys is specified below.              *)
(***************************************************************************)
(***********************************************************************)
(* The set of all prisoners.                                           *)
(***********************************************************************)
(***********************************************************************)
(* This is an arbitrarily chosen prisoner, who will do the necessary   *)
(* counting.                                                           *)
(***********************************************************************)
(*************************************************************************)
(* We assume that the counter is a prisoner.  We also assume that there  *)
(* is more than one prisoner.  (The problem is trivial if there is a     *)
(* single prisoner.)                                                     *)
(*************************************************************************)
(*************************************************************************)
(* The set of all prisoners other than the counter.                      *)
(*************************************************************************)
(***********************************************************************)
(* The states of the two switches, represented by boolean-valued       *)
(* variables.                                                          *)
(***********************************************************************)
(***********************************************************************)
(* For ever prisoner except the counter, timesSwitched[p] is the       *)
(* number of times prisoner p has moved switch A up.  It is initially  *)
(* 0 and will equal at most 2.                                         *)
(***********************************************************************)
(***********************************************************************)
(* The number of times the Counter has switched switch A down.         *)
(***********************************************************************)
(*************************************************************************)
(* The tuple of all variables.                                           *)
(*************************************************************************)
(***************************************************************************)
(* We first define three state predicates.                                 *)
(***************************************************************************)
(*************************************************************************)
(* The type-correctness invariant.  This is not actually part of the     *)
(* specification.  It is added to help the reader understand the         *)
(* specification and also because letting TLC (the model checker) check  *)
(* that it is an invariant is a good way to debug the specification.     *)
(*                                                                       *)
(* Note the bound on the value of count.                                 *)
(*************************************************************************)
(*************************************************************************)
(* The initial predicate.                                                *)
(*************************************************************************)
(*************************************************************************)
(* This is the condition that tells the counter that every other         *)
(* prisoner has been in the room at least once.  (He will trivially know *)
(* that he's already been in the room when this condition is true.)      *)
(*************************************************************************)
(***************************************************************************)
(* Next come the actions performed by each prisoner when he (or she) is    *)
(* brought into the room with the switches.                                *)
(***************************************************************************)
(*************************************************************************)
(* A prisoner other than the counter moves switch A up if it is down and *)
(* if (s)he has not already moved it up two times.  Otherwise, (s)he     *)
(* flips switch B.                                                       *)
(*************************************************************************)
(*************************************************************************)
(* If switch A is up, the counter moves it down and increments his (or   *)
(* her) count.  Otherwise, (s)he flips switch B.                         *)
(*************************************************************************)
(*************************************************************************)
(* The next-state relation                                               *)
(*************************************************************************)
(*************************************************************************)
(* This asserts that every prisoner is brought into the room infinitely  *)
(* often.                                                                *)
(*************************************************************************)
(*************************************************************************)
(* This formula asserts that safety condition: that Done true implies    *)
(* that every prisoner other than the counter has flipped switch A at    *)
(* least once--and hence has been in the room at least once.  Since the  *)
(* counter increments the count only when in the room, and Done implies  *)
(* count > 0, it also implies that the counter has been in the room.     *)
(*************************************************************************)
(*************************************************************************)
(* This asserts that Done is eventually true, so the prisoners are       *)
(* eventually released.                                                  *)
(*************************************************************************)
(*************************************************************************)
(* This theorem asserts that the specification satisfies properties      *)
(* Safety and Liveness.  TLC verifies this in a few seconds for the case *)
(* of a half dozen prisoners.  It also quickly provides a counterexample *)
(* if Done is changed to assert a smaller value of count.                *)
(*************************************************************************)
(*************************************************************************)
(* This is an invariant of Spec.  From its invariance, one can easily    *)
(* prove that Spec satisfies its safety property.                        *)
(*************************************************************************)
(*******************************************************************)
(* A recursive definition of the sum, over all p in OtherPrisoner, *)
(* of timesSwitched[p].                                            *)
(*******************************************************************)
(*******************************************************************)
(* Equals 1 if switch A is up, 0 otherwise.                        *)
(*******************************************************************)
