**************************************************************************)
Tower of Hanoi                                                          *)
*)
From https://en.wikipedia.org/wiki/Tower_of_Hanoi:                      *)
*)
The Tower of Hanoi is a mathematical game or puzzle.  It consists of    *)
three rods and a number of disks of different sizes, which can slide    *)
onto any rod.  The puzzle starts with the disks in a neat stack in      *)
ascending order of size on one rod, the smallest at the top, thus       *)
making a conical shape.                                                 *)
*)
The objective of the puzzle is to move the entire stack to another rod, *)
obeying the following simple rules:                                     *)
*)
1. Only one disk can be moved at a time.                              *)
2. Each move consists of taking the upper disk from one of the stacks *)
and placing it on top of another stack or on an empty rod.         *)
2. No larger disk may be placed on top of a smaller disk.             *)
**************************************************************************)
**************************************************************************)
We model the three positions where a "tower" of disks can be present as *)
sequences of natural numbers.  The numbers represent the sizes of the   *)
disks.                                                                  *)
*)
A, B, and C are the initial configurations of the towers. For example:  *)
A == <<1,2,3>>                                                        *)
B == <<>>                                                             *)
C == <<>>                                                             *)
**************************************************************************)
**************************************************************************)
A disk can be moved if:                                                 *)
- The source position is different from the destination.               *)
- The source tower is not empty.                                       *)
- The top disk of the source tower is smaller than the top disk of     *)
the destination tower.                                               *)
**************************************************************************)
**************************************************************************)
Moving a disk means the source tower is left with all but the top disk, *)
which is added to the destination tower.                                *)
**************************************************************************)
**************************************************************************)
This finishes the spec.  The next section are the invariants to check.  *)
**************************************************************************)
**************************************************************************)
Helper to get the elements of a sequence.                               *)
**************************************************************************)
**************************************************************************)
`towers` has 3 elements, each a sequence of numbers.                    *)
**************************************************************************)
**************************************************************************)
In all towers there should never be elements which were not initially   *)
present.                                                                *)
**************************************************************************)
**************************************************************************)
The total number of disks should stay constant.                         *)
**************************************************************************)
**************************************************************************)
The final configuration has all disks on the right tower with the disks *)
ordered by size.  If a violation of this invariant can be found, the    *)
stack trace shows the steps to solve the Hanoi problem.                 *)
**************************************************************************)