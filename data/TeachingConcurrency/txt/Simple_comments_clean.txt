BEGIN TRANSLATION  This is the TLA+ translation of the PlusCal code.
END TRANSLATION
Modification History
Last modified Wed May 15 02:33:18 PDT 2019 by lamport
Created Mon Apr 15 16:25:14 PDT 2019 by lamport
**************************************************************************)
This is a trivial example from the document "Teaching Conccurrency"     *)
that appeared in                                                        *)
*)
ACM SIGACT News Volume 40, Issue 1 (March 2009), 58-62              *)
*)
A copy of that article is at                                            *)
*)
http://lamport.azurewebsites.net/pubs/teaching-concurrency.pdf       *)
*)
It is also the example in Section 7.2 of "Proving Safety Properties",   *)
which is at                                                             *)
*)
http://lamport.azurewebsites.net/tla/proving-safety.pdf              *)
**************************************************************************)
Here is the algorithm in PlusCal.  It's easy to understand if you think
of the N processes, numbered from 0 through N-1, as arranged in a
circle, with processes (i-1) % N and (i+1) % N being the processes on
either side of process i.
--algorithm Simple {
variables x = [i \in 0..(N-1) |-> 0], y = [i \in 0..(N-1) |-> 0] ;
process (proc \in 0..N-1) {
a: x[self] := 1 ;
b: y[self] := x[(self-1) % N]
}
}
****************************************************************************)
Global variables *)
Allow infinite stuttering to prevent deadlock on termination. *)
**************************************************************************)
The property of this algorithm we want to prove is that, when all the   *)
processes have terminated, y[i] equals 1 for at least one process i.   *)
This property is express by the invariance of the following formula     *)
PCorrect.  In other words, we have to prove the theorem                 *)
*)
Spec => []PCorrect                                                   *)
**************************************************************************)
**************************************************************************)
Proving the invariance of PCorrect requires finding an inductive        *)
invariant Inv that implies it.  As usual, the inductive invariant       *)
includes a type-correctness invariant, which is the following formula   *)
TypeOK.                                                                 *)
**************************************************************************)
**************************************************************************)
It's easy to use TLC to check that the following formula Inv is an      *)
inductive invariant of the algorithm.  You should also be able check    *)
that the propositional logic tautology                                  *)
*)
(A => B) = ((~A) \/ B)                                               *)
*)
and the predicate logic tautology                                       *)
*)
(~ \A i \in S : P(i))  =  \E i \in S : ~P(i)                         *)
*)
imply that the last conjunct of Inv is equivalet to PCorrect.  When I   *)
wrote the definition, I knew that this conjunct of Inv implied          *)
PCorrect, but I didn't realize that the two were equivalent until I saw *)
the invariant written in terms of PCorrect in a paper by Yuri Abraham.  *)
That's why I originally didn't define Inv in terms of PCorrect.  I'm    *)
not sure why, but I find the implication to be a more natural way to    *)
write the postcondition PCorrect and the disjunction to be a more       *)
natural way to think about the inductive invariant.                     *)
**************************************************************************)
**************************************************************************)
Here is the proof of correctness.  The top-level steps <1>1 - <1>4 are  *)
the standard ones for an invariance proof, and the decomposition of the *)
proof of <1>2 was done with the Toolbox's Decompose Proof command.  It  *)
was trivial to get TLAPS to check the proof, except for the proof of    *)
<2>2.  A comment explains the problem I had with that step.             *)
**************************************************************************)
**********************************************************************)
I spent a lot of time decomposing this step down to about level <5> *)
until I realized that the problem was that the default SMT solver   *)
in the version of TLAPS I was using was CVC3, which seems to know   *)
nothing about the % operator.  When I used Z3, no further           *)
decomposition was needed.                                           *)
**********************************************************************)