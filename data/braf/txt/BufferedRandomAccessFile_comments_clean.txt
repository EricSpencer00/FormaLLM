Copyright (c) 2024, Oracle and/or its affiliates.
This is a model-checkable specification for BufferedRandomAccessFile.java.
It covers the core fields as well as the seek, read, write, flush, and
setLength operations.
There are three major correctess conditions:
(1) the internal invariants V1-V5 should hold
(2) the behavior should refine a general RandomAccessFile
(3) each operation should refine its RandomAccessFile counterpart
Readers will probably want to start with the general RandomAccessFile spec
before reading this one.
in-memory variables (BufferedRandomAccessFile class fields)
the underlying file
Internal invariants (copied from comment in BufferedRandomAccessFile.java)
denoted c(f) in .java file
denoted disk(f)[i] in .java file
/\ f.closed == closed(f) \* close() not described in this spec
/\ f.curr == curr(f)     \* by definition; see `file_pointer <- curr` in refinement mapping below
Inv2 is a bit special.  Most methods restore it just before they return.  It
is generally restored by calling `restoreInvariantsAfterIncreasingCurr()`.
But, that behavior is difficult to model in straight TLA+ because each
method may modify variables multiple times.  So instead, this spec treats
Inv2 as a precondition for the methods and verifies that it is always
restored by calling `restoreInvariantsAfterIncreasingCurr()`.
See `Inv2CanAlwaysBeRestored` below.
Behavior
super.seek(this.lo)
Helper for Seek (not a full action):
- reads lo'
- constrains diskPos', file_pointer', and buff'
call to FlushBuffer
In reality the buffer doesn't change---but some of its bytes might no
longer be relevant and have to be marked as arbitrary.
bound model checking
The `write()` method is composed of repeated calls to `writeAtMost()`, so
verifying that the latter maintains all our invariants should be sufficient.
Refinement of general RandomAccessFile
Ensure that the various actions behave according to their abstract specifications.
Inv2 is a precondition for many actions; it should always be possible to
restore Inv2 by execuing `restoreInvariantsAfterIncreasingCurr()`.  That
method calls `seeek(curr)`, which is composed of a FlushBuffer followed by a
Seek, or just a Seek.
To ensure that `restoreInvariantsAfterIncreasingCurr()` works as expected
(without using the \cdot action composition operator), we'll verify a few
things:
- dirty => ENABLED FlushBuffer
- FlushBuffer => ~dirty'
- ~dirty => ENABLED Seek(curr)
- Seek(curr) => Inv2'
Together, those properties ensure that it is always possible to restore Inv2
by taking a FlushBuffer action (if necessary) followed by a Seek(curr)
action.
Model checking helper definitions
constants
regular vars
abstract vars
Specification of Java's RandomAccessFile class.
A RandomAccessFile offers single-threaded access to some on-disk data
(`file_content`) and has an internal "pointer" or "cursor" (`file_pointer`).
Clients can move the pointer to an arbitrary position, or the client can
read or write data linearly from its current position, which simultaneously
advances the pointer.
The core operations are:
- seek (to move the pointer)
- setLength (to resize the data)
- read (to copy bytes from disk to memory)
- write (to copy bytes from memory to disk)
There are some cases where the general RandomAccessFile contract does not
define the data contents, for instance when extending the file using
setLength.  In this spec, undefined bytes in the file are explicitly marked
with `ArbitrarySymbol`.  While not entirely accurate, that choice simplifies
many definitions, since there is no need to nondeterministically choose
contents for the file.  It also (incidentally) reduces state space explosion
during model checking.
The pointer's behavior is very strange.  Per RandomAccessFile docs [1]:
> If the present length of the file as returned by the length method is
> greater than the newLength argument then the file will be truncated.
> In this case, if the file offset as returned by the getFilePointer
> method is greater than newLength then after this method returns the
> offset will be equal to newLength.
The docs say NOTHING else about the file pointer.  So, we can assume
that there are no other formal restrictions on its behavior.
[1]: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/RandomAccessFile.html#setLength(long)
This module contains constants and definitions common to both
RandomAccessFile and BufferedRandomAccessFile.
data stored in the file (in reality there are 256 symbols: bytes 0x00 to 0xFF)
special token for an arbitrary symbol (to reduce the need for nondeterministic choice)
the highest possible offset (in reality this is 2^63 - 1)
The set of legal offsets
The set of things that can appear at an offset in a file
Minimum and maximum of two numbers
Definitions for 0-indexed arrays (as opposed to TLA+ 1-indexed sequences).
A major goal of the BufferedRandomAccessFile spec is to prevent off-by-one
errors in the implementation; therefore it should use 0-indexed arrays like
Java.
The definitions are deliberately crafted so that the usual sequence
operators do NOT work on them; this is to help avoid accidental mixing of
sequences and arrays.
General contract of the file `write()` call: extend the file with
ArbitrarySymbols if necessary, then overlay some `data_to_write` at the
given offset.
General contract of the file `setLength()` call: truncate the file or fill
it with ArbitrarySymbol to reach the desired length.