\* Copyright (c) 2018, Backyard Innovations Pte. Ltd., Singapore.
\*
\* Released under the terms of the Apache License 2.0
\* See: file LICENSE that came with this software for details.
\*
\* This file contains Intellectual Property that belongs to
\* Backyard Innovations Pte Ltd., Singapore.
\*
\* Authors: Santhosh Raju <santhosh@byisystems.com>
\*          Cherry G. Mathew <cherry@byisystems.com>
\*          Fransisca Andriani <sisca@byisystems.com>
\*
\* The set of Vouchers
\* The set of Voucher Holders
\* The set of Voucher Collectors
\* vState[v] is the state of voucher v.
\* vlcState[v] is the state of the voucher life cycle
\* machine.
\* hState[h] is the state of voucher holder h.
\* cState[c] is the state of voucher collector c.
\* The state of the voucher transaction provider.
\* The set of Hs and Cs from which the VTP has received
\* "Prepared for Voucher Redeem" messages.
\* Modification History
\* Last modified Tue Jun 12 13:35:49 IST 2018 by Fox
\* Created Fri Mar 16 17:45:37 SGT 2018 by Fox
(***************************************************************************)
(* The description is based on the "Redeem" operation mentioned in RFC     *)
(* 3506. This specification describes the redemption of Voucher between    *)
(* a Holder and Collector. It is implemented over the Two-Phase Commit     *)
(* protocol, in which a Voucher Transaction Provider (VTP) coordinates the *)
(* Voucher Holders (Hs) to redeem vouchers (Vs) to Voucher Collectors (Cs) *)
(* described in the VoucherLifeCycle specification module. In this         *)
(* specification, Hs and Cs spontaneously issue Prepared messages. We      *)
(* ignore the Prepare messages that the VTP can send to the Hs and Cs.     *)
(*                                                                         *)
(* For simplicity, we also eliminate Abort messages sent by an Hs / Cs     *)
(* when it decides to abort.  Such a message would cause the VTP to abort  *)
(* the transaction, an event represented here by the VTP spontaneously     *)
(* deciding to abort.                                                      *)
(***************************************************************************)
(***********************************************************************)
(* In the protocol, processes communicate with one another by sending  *)
(* messages.  For simplicity, we represent message passing with the    *)
(* variable msgs whose value is the set of all messages that have been *)
(* sent.  A message is sent by adding it to the set msgs.  An action   *)
(* that, in an implementation, would be enabled by the receipt of a    *)
(* certain message is here enabled by the presence of that message in  *)
(* msgs.  For simplicity, messages are never removed from msgs.  This  *)
(* allows a single message to be received by multiple receivers.       *)
(* Receipt of the same message twice is therefore allowed; but in this *)
(* particular protocol, that's not a problem.                          *)
(***********************************************************************)
(*************************************************************************)
(* The set of all possible messages.  Messages of type "Prepared" are    *)
(* sent from the H indicated by the message's vh field to the VTP.       *)
(* Similar "Prepared" is also sent from C indicated by message's vc      *)
(* field to the VTP. Messages of type "Redeem" and "Abort" are broadcast *)
(* by the VTPs, to be received by all Hs and Cs.  The set msgs contains  *)
(* just a single copy of such a message.                                 *)
(*************************************************************************)
(*************************************************************************)
(* The type-correctness invariant                                        *)
(*************************************************************************)
(*************************************************************************)
(* The initial predicate.                                                *)
(*************************************************************************)
(***************************************************************************)
(* We now define the actions that may be performed by the processes, first *)
(* the VTP's actions, the Hs' actions, then the Cs' actions.               *)
(***************************************************************************)
(*************************************************************************)
(* The VTP receives a "Prepared" message from Voucher Holder h and the   *)
(* Voucher Collector c. We could add the additional enabling condition   *)
(* h,c \notin vtpRPrepared, which disables the action if the VTP has     *)
(* already received this message. But there is no need, because in that  *)
(* case the action has no effect; it leaves the state unchanged.         *)
(*************************************************************************)
(*************************************************************************)
(* The VTP Redeems the voucher; enabled iff the VTP is in its            *)
(* initial state and every H and C has sent a "Prepared" message.        *)
(*************************************************************************)
(*************************************************************************)
(* The VTP spontaneously aborts the transaction.                         *)
(*************************************************************************)
(*************************************************************************)
(* Voucher holder h prepares.                                            *)
(*************************************************************************)
(*************************************************************************)
(* Voucher holder h spontaneously decides to abort.  As noted above, h   *)
(* does not send any message in our simplified spec.                     *)
(*************************************************************************)
(*************************************************************************)
(* Voucher holder h is told by the VTP to Redeem.                        *)
(*************************************************************************)
(*************************************************************************)
(* Voucher holder h is told by the VTP to abort.                         *)
(*************************************************************************)
(*************************************************************************)
(* Voucher collector c prepares.                                         *)
(*************************************************************************)
(*************************************************************************)
(* Voucher collector c spontaneously decides to abort. As noted above, c *)
(* does not send any message in our simplified spec.                     *)
(*************************************************************************)
(*************************************************************************)
(* Voucher collector c is told by the VTP to Redeem.                     *)
(*************************************************************************)
(*************************************************************************)
(* Voucher collector c is told by the VTP to abort.                      *)
(*************************************************************************)
(*************************************************************************)
(* A state predicate asserting that a H and an C have not reached        *)
(* conflicting decisions. It is an invariant of the specification.       *)
(*************************************************************************)
(*************************************************************************)
(* The complete spec of the a Voucher Redeem using Two-Phase Commit      *)
(* protocol.                                                             *)
(*************************************************************************)
(*************************************************************************)
(* This theorem asserts the truth of the temporal formula whose meaning  *)
(* is that the state predicate VTPTypeOK /\ VTPConsistent is an          *)
(* invariant of the specification VTPSpec. Invariance of this            *)
(* conjunction is equivalent to invariance of both of the formulas       *)
(* VTPTypeOK and VTPConsistent.                                          *)
(*************************************************************************)
(***************************************************************************)
(* We now assert that the Voucher Redeem specification implements the      *)
(* Voucher Life Cycle specification of a voucher mentioned in module       *)
(* VoucherLifeCycle. The following statement imports all the definitions   *)
(* from module VoucherLifeCycle into the current module.                   *)
(***************************************************************************)
(*************************************************************************)
(* This theorem asserts that the specification VTPSpec of the Two-Phase  *)
(* Commit protocol implements the specification VSpec of the             *)
(* Voucher life cycle specification.                                     *)
(*************************************************************************)
