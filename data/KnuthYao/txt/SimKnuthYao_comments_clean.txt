3/8 tails, 5/8 heads.
Multiplying these probabilities quickly overflows TLC's dyadic rationals.
/\ p' = Reduce([ num |-> p.num * 3, den |-> p.den * 8 ])
/\ p' = Reduce([ num |-> p.num * 5, den |-> p.den * 8 ])
Statistically, modeling the crooked coin with a disjunct is the same,
but the generator won't extend the behavior if both disjuncts evaluate
to false. Confirm by running the generator with a fixed number of traces
and see how PostCondition is violated.
/\ \/ /\ RandomElement(1..10) \in 4..10
/\ flip' = "H"
\/ /\ RandomElement(1..10) \in 1..3
/\ flip' = "T"
Crooked coin: Decreasing chance of a tail over time.
Need an artificial initial state to be able to model a crooked coin.  Otherwise,
the first flip will always be fair.
This is expensive to evaluate with TLC.
The data collection below only works with TLC running in generation mode.
Do not artificially restrict the length of behaviors.
The algorithm terminates. Thus, do not check for deadlocks.
Require a recent versions of TLC with support for the operators appearing here.
Initialize the CSV file with a header.
Initialize TLC's registers 1 to 6 with zero.
Cfg: CONSTRAINT Stats
Update KnuthYao.svg every 100 samples.
Cfg: POSTCONDITION PostCondition