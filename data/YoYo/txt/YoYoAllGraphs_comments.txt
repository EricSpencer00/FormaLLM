\* number of nodes
\* at most one message per neighbor
\* at most one message per neighbor
\* true by construction
\* /\ IsLoopFreeUndirectedGraph([node |-> Nodes, edge |-> Nbrs])
\* always true for sinks
\* non-deterministically choose a sender for each value whose link
\* will not be pruned
\* true in particular for sinks
(****************************************************************************)
(* This module describes the Yo-Yo algorithm with pruning. Unlike the basic *)
(* specification of that algorithm in module YoYoPruning, it allows the     *)
(* algorithm to be verified for all undirected, loop-free, and connected    *)
(* graphs over a fixed number of nodes.                                     *)
(*                                                                          *)
(* Authors: Ludovic Yvoz and Stephan Merz, 2024.                            *)
(****************************************************************************)
(****************************************************************************)
(* Set of all (non-loop) edges over the set of nodes. The algorithm will    *)
(* operate over a subset of edges that forms a connected graph.             *)
(****************************************************************************)
(* the activation status of the node *)
(* the phase (down or up) each node is currently executing *)
(* incoming and outgoing neighbors of each node *)
(* mailbox of each node *)
(****************************************************************************)
(* Determine the kind of the node: leader, source, sink or internal.        *)
(****************************************************************************)
(****************************************************************************)
(* Messages sent during the algorithm.                                      *)
(****************************************************************************)
(****************************************************************************)
(* Type correctness predicate.                                              *)
(****************************************************************************)
(****************************************************************************)
(* Yo-Yo algorithm as a state machine.                                      *)
(****************************************************************************)
(****************************************************************************)
(* Down phase: we distinguish sources and other nodes.                      *)
(* Note that a node retains "down" messages after executing the phase       *)
(* because they are used during the up phase.                               *)
(****************************************************************************)
(****************************************************************************)
(* Up phase, again distinguishing sources and other nodes.                  *)
(*                                                                          *)
(* An internal or source node may already have received "down" messages     *)
(* for the following round from neighbors that it still considers as        *)
(* outgoing neighbors but for which the edge direction was reversed.        *)
(* We therefore have to be careful to only consider "down" messages from    *)
(* neighbors that the node considers as incoming, and also to preserve      *)
(* "down" messages for the following round when cleaning the mailbox.       *)
(****************************************************************************)
(****************************************************************************)
(* Formulas used for verification.                                          *)
(****************************************************************************)
(****************************************************************************)
(* Predicate asserting that there will always be at least two source nodes. *)
(* Checking this as an invariant produces an execution that shows that all  *)
(* sources except for the leader will be eliminated.                        *)
(****************************************************************************)
(****************************************************************************)
(* Node m is an outgoing neighbor of node n iff n is an incoming neighbor   *)
(* of m, except if the edge is being reversed, in which case there is a     *)
(* "no" message in one of the mailboxes, or if the edge is being pruned,    *)
(* in which case there is a corresponding message pending at node n.        *)
(****************************************************************************)
(****************************************************************************)
(* Termination condition: the node with smallest identity is the leader,    *)
(* all other nodes are inactive, all mailboxes are empty.                   *)
(* Check that the algorithm will reach such a state, and that this is the   *)
(* only final (deadlock) state.                                             *)
(****************************************************************************)
