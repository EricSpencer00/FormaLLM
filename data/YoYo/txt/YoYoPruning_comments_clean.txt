the nodes and edges of the graph
at most one message per neighbor
at most one message per neighbor
always true for sinks
non-deterministically choose a sender for each value whose link
will not be pruned
true in particular for sinks
***************************************************************************)
The version of the Yo-Yo algorithm without pruning stabilizes in a state *)
with a single source node. However, that algorithm does not terminate,   *)
and no single node can detect that the algorithm has stabilized. In      *)
order to ensure termination, the "up" ("-Yo") phase of the algorithm is  *)
extended in order to prune the graph by applying the following rules.    *)
*)
1. A sink node with a single (incoming) neighbor receives only one value *)
during the "down" phase, and therefore replies "yes" in the "up"      *)
phase of the algorithm. Since it does not contribute any useful       *)
information, it will become inactive and be removed from the graph.   *)
2. A node (internal or sink) that receives the same value from several   *)
neighbors non-deterministically chooses one of these neighbors and    *)
prunes the links to all other neighbors that sent the same value.     *)
The rationale is that these neighbors correspond to different paths   *)
from the same source node, and maintaining one path is enough.        *)
*)
Applying these two rules, nodes and links are eliminated until the only  *)
remaining source becomes an isolated node, at which point it proclaims   *)
itself to be the leader. All other nodes will have become inactive.      *)
The pruning phase is implemented by adding a flag to "up" messages,      *)
indicating to the receiver whether to prune the corresponding link.      *)
*)
Authors: Ludovic Yvoz and Stephan Merz, 2024.                            *)
***************************************************************************)
nodes are represented by their integer identities *)
the activation status of the node *)
the phase (down or up) each node is currently executing *)
incoming and outgoing neighbors of each node *)
mailbox of each node *)
***************************************************************************)
Determine the kind of the node: leader, source, sink or internal.        *)
***************************************************************************)
***************************************************************************)
Messages sent during the algorithm.                                      *)
***************************************************************************)
***************************************************************************)
Type correctness predicate.                                              *)
***************************************************************************)
***************************************************************************)
Yo-Yo algorithm as a state machine.                                      *)
***************************************************************************)
***************************************************************************)
Down phase: we distinguish sources and other nodes.                      *)
Note that a node retains "down" messages after executing the phase       *)
because they are used during the up phase.                               *)
***************************************************************************)
***************************************************************************)
Up phase, again distinguishing sources and other nodes.                  *)
*)
An internal or source node may already have received "down" messages     *)
for the following round from neighbors that it still considers as        *)
outgoing neighbors but for which the edge direction was reversed.        *)
We therefore have to be careful to only consider "down" messages from    *)
neighbors that the node considers as incoming, and also to preserve      *)
"down" messages for the following round when cleaning the mailbox.       *)
***************************************************************************)
***************************************************************************)
Formulas used for verification.                                          *)
***************************************************************************)
***************************************************************************)
Predicate asserting that there will always be at least two source nodes. *)
Checking this as an invariant produces an execution that shows that all  *)
sources except for the leader will be eliminated.                        *)
***************************************************************************)
***************************************************************************)
Node m is an outgoing neighbor of node n iff n is an incoming neighbor   *)
of m, except if the edge is being reversed, in which case there is a     *)
"no" message in one of the mailboxes, or if the edge is being pruned,    *)
in which case there is a corresponding message pending at node n.        *)
***************************************************************************)
***************************************************************************)
The base algorithm without pruning ensures that no new sources are       *)
generated during execution of the algorithm. Due to pruning, this        *)
property may fail for the full algorithm, and TLC finds a counter-       *)
example for the small example graph provided in the MC module (but the   *)
property happens to be true for the larger graph).                       *)
***************************************************************************)
***************************************************************************)
Termination condition: the node with smallest identity is the leader,    *)
all other nodes are inactive, all mailboxes are empty.                   *)
Check that the algorithm will reach such a state, and that this is the   *)
only final (deadlock) state.                                             *)
***************************************************************************)