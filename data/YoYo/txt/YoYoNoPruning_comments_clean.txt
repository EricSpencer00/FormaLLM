the nodes and edges of the graph
at most one message per neighbor
at most one message per neighbor
always true for sinks
true in particular for sinks
***************************************************************************)
TLA+ specification of the Yo-Yo leader election algorithm in arbitrary   *)
undirected graphs without self-loops. The algorithm was introduced by    *)
Nicola Santoro, cf. "Design and Analysis of Distributed Algorithms",     *)
section 3.8.3, see also https://en.wikipedia.org/wiki/Yo-yo_(algorithm). *)
The algorithm assumes that nodes are (identified by) integers, and the   *)
node with the smallest identity will be elected leader.                  *)
*)
The algorithm orients the edges of the graph. Initially, all edges are   *)
directed from smaller to larger node identities, so sources correspond   *)
to local minima in their neighborhoods and sinks correspond to local     *)
maxima. Sources are considered candidates for being leader, and as long  *)
as their are at least two sources, each round will eliminate at least    *)
one of them.                                                             *)
*)
Each round consists of two phases, traditionally called the "Yo-" and    *)
"-Yo" phases, that will be called "down" and "up" phases below.          *)
The down phase is initiated by the sources, which broadcast their        *)
identity to all neighbors. Non-source nodes wait for values to have been *)
received from all incoming neighbors, then broadcast the minimum value   *)
that has been received to all outgoing neighbors. (Sink nodes do not     *)
send messages in the down phase.)                                        *)
*)
The up phase is initiated by sink nodes when they have received values   *)
from all neighbors in the down phase. They reply "yes" to all neighbors  *)
that sent the minimum value and "no" to all other neighbors. The other   *)
nodes wait until messages for the up phase have been received from all   *)
outgoing neighbors. If one message is "no", they send "no" to all        *)
incoming neighbors, otherwise they send "yes" to those incoming          *)
neighbors who sent the smallest value during the down phase and "no" to  *)
all other incoming neighbors. (Source nodes do not send messages in the  *)
up phase.)                                                               *)
Moreover, edges along which a "no" message is sent during the up phase   *)
change orientation. This may change the status of a node (source,        *)
sink or internal).                                                       *)
*)
The algorithm stabilizes in a state where there is at most one source,   *)
after which point only the identity of that source will be sent during   *)
the down phase and only "yes" messages will be sent during the up phase. *)
However, no node detects termination. Ensuring termination of the        *)
algorithm is achieved by pruning the graph, modeled in a variant of the  *)
present specification.                                                   *)
*)
Authors: Ludovic Yvoz and Stephan Merz, 2024.                            *)
***************************************************************************)
nodes are represented by their integer identities *)
the phase (down or up) each node is currently executing *)
incoming and outgoing neighbors of each node *)
mailbox of each node *)
***************************************************************************)
Determine the kind of the node: source, sink or internal.                *)
***************************************************************************)
***************************************************************************)
Messages sent during the algorithm.                                      *)
***************************************************************************)
***************************************************************************)
Type correctness predicate.                                              *)
***************************************************************************)
***************************************************************************)
Yo-Yo algorithm as a state machine.                                      *)
***************************************************************************)
***************************************************************************)
Down phase: we distinguish sources and other nodes.                      *)
Note that a node retains "down" messages after executing the phase       *)
because they are used during the up phase.                               *)
***************************************************************************)
***************************************************************************)
Up phase, again distinguishing sources and other nodes.                  *)
*)
An internal or source node may already have received "down" messages     *)
for the following round from neighbors that it still considers as        *)
outgoing neighbors but for which the edge direction was reversed.        *)
We therefore have to be careful to only consider "down" messages from    *)
neighbors that the node considers as incoming, and also to preserve      *)
"down" messages for the following round when cleaning the mailbox.       *)
***************************************************************************)
***************************************************************************)
Formulas used for verification.                                          *)
***************************************************************************)
***************************************************************************)
Predicate asserting that there will always be at least two source nodes. *)
Checking this as an invariant produces an execution that shows that all  *)
sources except for the leader will be eliminated.                        *)
***************************************************************************)
***************************************************************************)
Node m is an outgoing neighbor of node n iff n is an incoming neighbor   *)
of m, except if the edge is being reversed, in which case there is a     *)
"no" message in one of the mailboxes.                                    *)
***************************************************************************)
***************************************************************************)
No new sources are generated during execution of the algorithm.          *)
***************************************************************************)
***************************************************************************)
Stabilization condition: there is only one source node, all "down"       *)
messages carry the identity of that node, all "up" messages say "yes".   *)
***************************************************************************)