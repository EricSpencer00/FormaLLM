\* Round number starts at 0.
\* published[index] is true if published in an even round otherwise false
\* as it was published in an odd round number.
\* Flip whether we're at an even or odd round.
\* Are we clear of all consumers? (Potentially a full cycle behind).
\* Track what we read from the ringbuffer.
(***************************************************************************)
(* Models a Multi Producer, Multi Consumer Disruptor (MPMC).               *)
(*                                                                         *)
(* The producers publish their claimed sequence number as value into       *)
(* the RingBuffer and the model verifies that all consumers read all       *)
(* published values.                                                       *)
(*                                                                         *)
(* The model also verifies that no data races occur between the producers  *)
(* and consumers and that all consumers eventually read all published      *)
(* values (in a Multicast fashion - i.e. all consumers read all events).   *)
(***************************************************************************)
(* Max number of published events. Bounds the model.    *)
(* Writer/producer thread ids.                          *)
(* Reader/consumer thread ids.                          *)
(* Ringbuffer size.                                     *)
(* Shared counter for claiming a sequence for a Writer. *)
(* Claimed sequence by each Writer.                     *)
(* Encodes whether each slot is published.              *)
(* Read Cursors. One per Reader.                        *)
(* Program Counter for each Writer/Reader.              *)
(* Sequence of all read events by the Readers.          *)
(* This is a history variable used for liveliness       *)
(* checking.                                            *)
(***************************************************************************)
(* Each producer/consumer can be in one of two states:                     *)
(* 1. Accessing a slot in the Disruptor or                                 *)
(* 2. Advancing to the next slot.                                          *)
(***************************************************************************)
(***************************************************************************)
(* Encode whether an index is published by tracking if the slot was        *)
(* published in an even or odd index. This works because producers         *)
(* cannot overtake consumers.                                              *)
(***************************************************************************)
(***************************************************************************)
(* Computes the highest published sequence number that can be read.        *)
(* This might seem strange but e.g. a producer P1 can be about to publish  *)
(* sequence 5 while producer P2 has published sequence 6 and thus          *)
(* consumers can neither read sequence 5 nor 6 (yet).                      *)
(***************************************************************************)
(***************************************************************************)
(* Producer Actions:                                                       *)
(***************************************************************************)
(***************************************************************************)
(* Consumer Actions:                                                       *)
(***************************************************************************)
(***************************************************************************)
(* Spec:                                                                   *)
(***************************************************************************)
(***************************************************************************)
(* State constraint - bounds model:                                        *)
(***************************************************************************)
(***************************************************************************)
(* Invariants:                                                             *)
(***************************************************************************)
(***************************************************************************)
(* Properties:                                                             *)
(***************************************************************************)
(* Eventually always, consumers must have read all published values.       *)
