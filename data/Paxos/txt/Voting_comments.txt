\* The set of choosable values.
\* A set of processes that will choose a value.
\* The set of "quorums", where a quorum" is a
\*   "large enough" set of acceptors
\* votes[a] is the set of votes cast by acceptor a
\* maxBal[a] is a ballot number.  Acceptor a will cast
\*   further votes only in ballots numbered \geq maxBal[a]
(***************************************************************************)
(* This is a high-level algorithm in which a set of processes              *)
(* cooperatively choose a value.                                           *)
(***************************************************************************)
(***************************************************************************)
(* Here are the assumptions we make about quorums.                         *)
(***************************************************************************)
(***************************************************************************)
(* Ballot is a set of "ballot numbers".  For simplicity, we let it be the  *)
(* set of natural numbers.  However, we write Ballot for that set to       *)
(* distinguish ballots from natural numbers used for other purposes.       *)
(***************************************************************************)
(***************************************************************************)
(* In the algorithm, each acceptor can cast one or more votes, where each  *)
(* vote cast by an acceptor has the form <<b, v>> indicating that the      *)
(* acceptor has voted for value v in ballot b.  A value is chosen if a     *)
(* quorum of acceptors have voted for it in the same ballot.               *)
(***************************************************************************)
(***************************************************************************)
(* The algorithm's variables.                                              *)
(***************************************************************************)
(***************************************************************************)
(* The type-correctness invariant.                                         *)
(***************************************************************************)
(***************************************************************************)
(* We now make a series of definitions an assert some simple theorems      *)
(* about those definitions that lead to the algorithm.                     *)
(***************************************************************************)
(*************************************************************************)
(* True iff acceptor a has voted for v in ballot b.                      *)
(*************************************************************************)
(*************************************************************************)
(* True iff a quorum of acceptors have all voted for v in ballot b.      *)
(*************************************************************************)
(*************************************************************************)
(* The set of values that have been chosen.                              *)
(*************************************************************************)
(*************************************************************************)
(* Because acceptor a will not cast any more votes in a ballot numbered  *)
(* < maxBal[a], this implies that a has not and will never cast a vote   *)
(* in ballot b.                                                          *)
(*************************************************************************)
(*************************************************************************)
(* If this is true, then ChosenAt(b, w) is not and can never become true *)
(* for any w # v.                                                        *)
(*************************************************************************)
(*************************************************************************)
(* If this is true, then no value other than v has been or can ever be   *)
(* chosen in any ballot numbered less than b.                            *)
(*************************************************************************)
(***************************************************************************)
(* We now write the specification.  The initial condition is               *)
(* straightforward.                                                        *)
(***************************************************************************)
(***************************************************************************)
(* Next are the actions that make up the next-state action.                *)
(*                                                                         *)
(* An acceptor a is allowed to increase maxBal[a] to a ballot number b at  *)
(* any time.                                                               *)
(***************************************************************************)
(***************************************************************************)
(* Next is the action in which acceptor a votes for v in ballot b.  The    *)
(* first four conjuncts re enabling conditions.  The first maintains the   *)
(* requirement that the acceptor cannot cast a vote in a ballot less than  *)
(* maxBal[a].  The next two conjuncts maintain the invariance of           *)
(* OneValuePerBallot.  The fourth conjunct maintains the invariance of     *)
(* VotesSafe.                                                              *)
(***************************************************************************)
(***************************************************************************)
(* The next-state action and the invariant.                                *)
(***************************************************************************)
(***************************************************************************)
(* The following statement instantiates module Consensus with the constant *)
(* Value of this module substituted for the constant Value of module       *)
(* Consensus, and the state function `chosen' defined in this module       *)
(* substituted for the variable `chosen' of module Value.  More precisely, *)
(* for each defined identifier id of module Value, this statement defines  *)
(* C!id to equal the value of id under these substitutions.                *)
(***************************************************************************)
