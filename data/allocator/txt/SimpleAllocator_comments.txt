\* set of all clients
\* set of all resources
\* set of all outstanding requests per process
\* set of resources allocated to given process
(***********************************************************************)
(* Specification of an allocator managing a set of resources:          *)
(* - Clients can request sets of resources whenever all their previous *)
(*   requests have been satisfied.                                     *)
(* - Requests can be partly fulfilled, and resources can be returned   *)
(*   even before the full request has been satisfied. However, clients *)
(*   only have an obligation to return resources after they have       *)
(*   obtained all resources they requested.                            *)
(***********************************************************************)
(* Resources are available iff they have not been allocated. *)
(* Initially, no resources have been requested or allocated. *)
(* A client c may request a set of resources provided that all of its  *)
(* previous requests have been satisfied and that it doesn't hold any  *)
(* resources.                                                          *)
(* Allocation of a set of available resources to a client that         *)
(* requested them (the entire request does not have to be filled).     *)
(* Client c returns a set of resources that it holds. It may do so     *)
(* even before its full request has been honored.                      *)
(* The next-state relation. *)
(* The complete high-level specification. *)
(* Used for symmetry reduction with TLC *)
(* The following version states a weaker fairness requirement for the  *)
(* clients: resources need be returned only if the entire request has  *)
(* been satisfied.                                                     *)
(** The following do not hold:                          **)
(** THEOREM SimpleAllocator2 => ClientsWillObtain       **)
(** THEOREM SimpleAllocator2 => InfOftenSatisfied       **)
