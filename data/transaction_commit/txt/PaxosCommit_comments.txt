\* The set of resource managers.
\* The set of acceptors.
\* The set of majorities of acceptors
\* The set of ballot numbers
\* We assume these properties of the declared constants.
\* $rmState[rm]$ is the state of resource manager $rm$.
\* $aState[ins][ac]$ is the state of acceptor $ac$ for instance
\* $ins$ of the Paxos algorithm
\* The set of all messages ever sent.
\* The initial predicate.
\* The next-state action
(***************************************************************************)
(* This module specifies the Paxos Commit algorithm.  We specify only      *)
(* safety properties, not liveness properties.  We simplify the            *)
(* specification in the following ways.                                    *)
(* \begin{itemize}                                                         *)
(* \item As in the specification of module $TwoPhase$, and for the same    *)
(* reasons, we let the variable $msgs$ be the set of all messages that     *)
(* have ever been sent.  If a message is sent to a set of recipients,      *)
(* only one copy of the message appears in $msgs$.                         *)
(*                                                                         *)
(* \item We do not explicitly model the receipt of messages.  If an        *)
(* operation can be performed when a process has received a certain set    *)
(* of messages, then the operation is represented by an action that is     *)
(* enabled when those messages are in the set $msgs$ of sent messages.     *)
(* (We are specifying only safety properties, which assert what events     *)
(* can occur, and the operation can occur if the messages that enable it   *)
(* have been sent.)                                                        *)
(*                                                                         *)
(* \item We do not model leader selection.  We define actions that the     *)
(* current leader may perform, but do not specify who performs them.       *)
(* \end{itemize}                                                           *)
(*                                                                         *)
(* As in the specification of Two-Phase commit in module $TwoPhase$, we    *)
(* have RMs spontaneously issue Prepared messages and we ignore $Prepare$  *)
(* messages.                                                               *)
(***************************************************************************)
(*************************************************************************)
(* If $S$ is a set of numbers, then this define $Maximum(S)$ to be the   *)
(* maximum of those numbers, or $-1$ if $S$ is empty.                    *)
(*************************************************************************)
(********************************************************************)
(* All we assume about the set $Majority$ of majorities is that any *)
(* two majorities have non-empty intersection.                      *)
(********************************************************************)
(*************************************************************************)
(* The set of all possible messages.  There are messages of type         *)
(* $"Commit"$ and $"Abort"$ to announce the decision, as well as         *)
(* messages for each phase of each instance of $ins$ of the Paxos        *)
(* consensus algorithm.  The $acc$ field indicates the sender of a       *)
(* message from an acceptor to the leader; messages from a leader are    *)
(* broadcast to all acceptors.                                           *)
(*************************************************************************)
(*************************************************************************)
(* The type-correctness invariant.  Each acceptor maintains the values   *)
(* $mbal$, $bal$, and $val$ for each instance of the Paxos consensus     *)
(* algorithm.                                                            *)
(*************************************************************************)
(***************************************************************************)
(* \mbox{}\hfill{\large \textbf{The Actions}}\hfill\mbox{}                 *)
(***************************************************************************)
(*************************************************************************)
(* An action expression that describes the sending of message $m$.       *)
(*************************************************************************)
(***************************************************************************)
(* {\large \textbf{RM Actions}}                                            *)
(***************************************************************************)
(*************************************************************************)
(* Resource manager $rm$ prepares by sending a phase 2a message for      *)
(* ballot number 0 with value $"prepared".$                              *)
(*************************************************************************)
(*************************************************************************)
(* Resource manager $rm$ spontaneously decides to abort.  It may (but    *)
(* need not) send a phase 2a message for ballot number 0 with value      *)
(* $"aborted"$.                                                          *)
(*************************************************************************)
(*************************************************************************)
(* Resource manager $rm$ is told by the leader to commit.  When   *)
(* this action is enabled, $rmState[rm]$ must equal either $"prepared"$  *)
(* or $"committed"$.  In the latter case, the action leaves the state    *)
(* unchanged (it is a ``stuttering step'').                              *)
(*************************************************************************)
(*************************************************************************)
(* Resource manager $rm$ is told by the leader to abort.  It      *)
(* could be in any state except $"committed"$.                           *)
(*************************************************************************)
(***************************************************************************)
(* {\large \textbf{Leader Actions}}  \vspace{.25\baselineskip}             *)
(*                                                                         *)
(* The following actions are performed by any process that believes itself *)
(* to be the current leader.  Since leader selection is not assumed *)
(* to be reliable, multiple processes could simultaneously consider        *)
(* themselves to be the leader.                                     *)
(***************************************************************************)
(*************************************************************************)
(* If the leader times out without learning that a decision has   *)
(* been reached on resource manager $rm$'s prepare/abort decision, it    *)
(* can perform this action to initiate a new ballot $bal$.  (Sending     *)
(* duplicate phase 1a messages is harmless.)                             *)
(*************************************************************************)
(*************************************************************************)
(* The action in which a leader sends a phase 2a message with ballot     *)
(* $bal>0$ in instance $rm$, if it has received phase 1b messages for    *)
(* ballot number $bal$ from a majority of acceptors.  If the leader      *)
(* received a phase 1b message from some acceptor that had sent a phase  *)
(* 2b message for this instance, then $maxbal\geq0$ and the value $val$  *)
(* the leader sends is determined by the phase 1b messages.  (If         *)
(* $val="prepared"$, then $rm$ must have prepared.)  Otherwise,          *)
(* $maxbal=-1$ and the leader sends the value $"aborted"$.               *)
(* \vspace{.5\baselineskip}                                              *)
(*                                                                       *)
(* The first conjunct asserts that the action is disabled if any commit  *)
(* leader has already sent a phase 2a message with ballot number $bal$.  *)
(* In practice, this is implemented by having ballot numbers partitioned *)
(* among potential leaders, and having a leader record in stable storage *)
(* the largest ballot number for which it sent a phase 2a message.       *)
(*************************************************************************)
(*************************************************************************)
(* A leader can decide that Paxos Commit has reached a result and send a *)
(* message announcing the result if it has received the necessary phase  *)
(* 2b messages.                                                          *)
(*************************************************************************)
(****************************************************************)
(* True iff instance $rm$ of the Paxos consensus algorithm has  *)
(* chosen the value $v$.                                        *)
(****************************************************************)
(***************************************************************************)
(* {\large \textbf{Acceptor  Actions}}                                     *)
(***************************************************************************)
(*************************************************************************)
(* The complete spec of the Paxos Commit protocol.                       *)
(*************************************************************************)
(***************************************************************************)
(* We now assert that the two-phase commit protocol implements the         *)
(* transaction commit protocol of module TCommit.  The following statement *)
(* defines $TC!TCSpec$ to be the formula $TCSpec$ of module $TCommit$.     *)
(* (The TLA$^+$ \textsc{instance} statement must is used to rename the     *)
(* operators defined in module $TCommit$ to avoid possible name conflicts  *)
(* with operators in the current module having the same name.)             *)
(***************************************************************************)
