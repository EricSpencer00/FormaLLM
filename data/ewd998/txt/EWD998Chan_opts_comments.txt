\* The data collection below only works with TLC running in generation mode.
\* Unless TLC runs with -Dtlc2.tool.impl.Tool.probabilistic=true (or -generate),
\* the simulator generates all successor states from which it chooses one randomly.
\* In "generate" mode, however, TLC randomly generates a (single) successor state.
\* Do not artificially restrict the length of behaviors.
\* The algorithm terminates. Thus, do not check for deadlocks.
\* Require a recent versions of TLC with support for the operators appearing below.
\* A set of "feature flags". {} is equal to vanilla EWD998. pt 1 to 4 are
\* algorithm variants that might or might not make the algorithm more efficient.
\* We define efficient here as how quickly termination is detected and how many
\* rounds are executed, i.e., how many  InitiateProbe  actions occur on average.
\* The way we are going to measure efficiency is by measuring the number of
\* steps between termination of  Environment  and the termination detection
\* by  System  .  Additionally, we will count the number of all actions.
\*
\* pt1, pt2: An active node may pass the token if the node or token are tainted.
\* pt3: Return the token to the initiator and, thus, short-circuits the token
\* round, iff the node is black.
\* pt4: Return the token to the initiator iff the token is black.
\*
\* (pt3 and pt4 can be described as "aborting" an inconclusive token round by
\* directly returning the token to the initiator).
\*
\* The variants pt3 & pt4 come at the cost of all nodes knowing the identify of
\* the initiator.  However, this would be trivially addressed by stamping the
\* initiator's id onto the token.
\*
\* As we do not model a particular workload by constraining the behaviors
\* satisfying  Environment, the TLC generator has to run long enough to create a
\* sufficient amount of traces.
\* Constraint the set of initial states defined in EWD998!Init to
\* those that correspond to what an implementation is likely to start with.
\* In other words, when collecting statistics, we don't want to start in a
\* state where the system has e.g. already terminated.
\* If machine i is active, keep the token.
\* the machine nr.i+1 transmits the token to machine nr.i under q := q + c[i+1]
\* pass on the token.
\* The state of the nodes remains unchanged by token-related actions.
\* Initialize TLC register.
\* This is just an ordinary state constraint (could have been an invariant
\* too).  The disadvantage of a constraint (or inv) is that the antecedent
\* is evaluated for *every* generated state, instead of just after the last
\* state when we actually want the consequent to be evalauted.
\* A constraint's advantage is that it works with old versions of TLC.
\* Append record to CSV file on disk.
\* Note "Opts" suffix!
\* Reset the counter for the next behavior.
(* Rule 2 *)
(* Rule 7 *)
