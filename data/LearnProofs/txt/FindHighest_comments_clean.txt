BEGIN TRANSLATION (chksum(pcal) = "31f24270" /\ chksum(tla) = "819802c6")
END TRANSLATION
The type invariant; the proof system likes knowing variables are in Nat.
It's a good idea to check these invariants with the model checker before
trying to prove them. To quote Leslie Lamport, it's very difficult to
prove something that isn't true!
It's useful to prove the type invariant first, so it can be used as an
assumption in further proofs to restrict variable values.
To prove theorems like Spec => []Invariant, you have to:
1. Prove Invariant holds in the initial state (usually trivial)
2. Prove Invariant holds when variables are unchanged (usually trivial)
3. Prove that assuming Invariant is true, a Next step implies Invariant'
The last one (inductive case) is usually quite difficult. It helps to
never forget you have an extremely powerful assumption: that Invariant is
true!
The base case
The stuttering case
The inductive case; usually requires breaking down Next into disjuncts
The inductive invariant; writing these is an art. You want an invariant
that can be shown to be true in every state, and if it's true in all
states, it can be shown to imply algorithm correctness as a whole.
We need to note we made use of the type invariant theorem here
A small sub-theorem that relates our inductive invariant to correctness
The main event! After the algorithm has terminated, the variable h must
have value greater than or equal to any element of the sequence.
Correctness is implied by the preceding invariants.
**************************************************************************)
Defines a very simple algorithm that finds the largest value in a       *)
sequence of Natural numbers. This was created as an exercise in finding *)
& proving type invariants, inductive invariants, and correctness.       *)
**************************************************************************)
--algorithm Highest {
variables
f \in Seq(Nat);
h = -1;
i = 1;
define {
max(a, b) == IF a >= b THEN a ELSE b
} {
lb: while (i <= Len(f)) {
h := max(h, f[i]);
i := i + 1;
}
}
}
****************************************************************************)
define statement *)
Global variables *)
Allow infinite stuttering to prevent deadlock on termination. *)