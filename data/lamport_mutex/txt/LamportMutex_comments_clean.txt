local clock of each process
requests received from processes (clock transmitted with request)
acknowledgements received from processes
messages sent but not yet received
set of processes in critical section
**************************************************************************)
TLA+ specification of Lamport's distributed mutual-exclusion algorithm  *)
that appeared as an example in                                          *)
L. Lamport:  Time, Clocks and the Ordering of Events in a Distributed   *)
System. CACM 21(7):558-565, 1978.                                       *)
**************************************************************************)
**************************************************************************)
The parameter N represents the number of processes.                     *)
The parameter maxClock is used only for model checking in order to      *)
keep the state space finite.                                            *)
**************************************************************************)
**************************************************************************)
For model checking, add ClockConstraint as a state constraint to ensure *)
a finite state space and override the definition of Clock by            *)
1 .. maxClock+1 so that TLC can evaluate the definition of Message.     *)
**************************************************************************)
**************************************************************************)
Messages used in the algorithm.                                         *)
**************************************************************************)
**************************************************************************)
The type correctness predicate.                                         *)
**************************************************************************)
clock[p] is the local clock of process p *)
req[p][q] stores the clock associated with request from q received by p, 0 if none *)
ack[p] stores the processes that have ack'ed p's request *)
network[p][q]: queue of messages from p to q -- pairwise FIFO communication *)
set of processes in critical section: should be empty or singleton *)
**************************************************************************)
The initial state predicate.                                            *)
**************************************************************************)
**************************************************************************)
beats(p,q) is true if process p believes that its request has higher    *)
priority than q's request. This is true if either p has not received a  *)
request from q or p's request has a smaller clock value than q's.       *)
If there is a tie, the numerical process ID decides.                    *)
**************************************************************************)
**************************************************************************)
Broadcast a message: send it to all processes except the sender.        *)
**************************************************************************)
**************************************************************************)
Process p requests access to critical section.                          *)
**************************************************************************)
**************************************************************************)
Process p receives a request from q and acknowledges it.                *)
**************************************************************************)
**************************************************************************)
Process p receives an acknowledgement from q.                           *)
**************************************************************************)
*************************************************************************)
Process p enters the critical section.                                 *)
*************************************************************************)
**************************************************************************)
Process p exits the critical section and notifies other processes.      *)
**************************************************************************)
**************************************************************************)
Process p receives a release notification from q.                       *)
**************************************************************************)
**************************************************************************)
Next-state relation.                                                    *)
**************************************************************************)
**************************************************************************)
A state constraint that is useful for validating the specification      *)
using finite-state model checking.                                      *)
**************************************************************************)
**************************************************************************)
No channel ever contains more than three messages. In fact, no channel  *)
ever contains more than one message of the same type, as proved below.  *)
**************************************************************************)
**************************************************************************)
The main safety property of mutual exclusion.                           *)
**************************************************************************)