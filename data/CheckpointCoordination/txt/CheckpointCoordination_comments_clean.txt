The set of all nodes available for use in the cluster
The number of nodes constituting a majority
Whether each node is up
Whether a network path exists between nodes
Which node is currently elected leader
The replicated log of commands on each node
The index in the log each node will next execute
Data field which piggybacks on vote responses
The current checkpoint lease recorded at each nodes
Whether node believes it can take a checkpoint
Whether node is currently taking a checkpoint
Counter of oldest lease which has not yet timed out
The latest recorded log checkpoint
The saved log entries
Highest log index in checkpoint, exclusive
The node to which the checkpoint lease applies
The log index at which the lease was issued
The leader cannot take a checkpoint
If the leader doesn't know about a lease, neither does any node
If the leader knows about a lease, only that node can checkpoint
Two nodes can't take a checkpoint simultaneously
Prerequisites for taking a checkpoint must be satisfied
Replicated logs can never conflict
Eventually, a checkpoint can be taken
If a node can take a checkpoint, eventually it will take a checkpoint
If a node takes a checkpoint, eventually it will complete or timeout
Eventually, a checkpoint will be completed
Current lease has timed out
Snapshot has been completed & reported to leader by node
**************************************************************************)
Variables relating to the environment in which the cluster is running.  *)
**************************************************************************)
**************************************************************************)
Variables relating to the function of the Paxos (RSL) system itself.    *)
**************************************************************************)
**************************************************************************)
Variables relating to the checkpoint coordination system logic.         *)
**************************************************************************)
**************************************************************************)
All variables.                                                          *)
**************************************************************************)
**************************************************************************)
An arbitrary value not in the set of all nodes.                         *)
**************************************************************************)
**************************************************************************)
The set of all logs, the values of which are decided by Paxos.          *)
**************************************************************************)
**************************************************************************)
The set of all log indices.                                             *)
**************************************************************************)
**************************************************************************)
The very first log index.                                               *)
**************************************************************************)
**************************************************************************)
A blank log.                                                            *)
**************************************************************************)
**************************************************************************)
The set of all log checkpoints.                                         *)
**************************************************************************)
**************************************************************************)
The set of all log checkpoint leases.                                   *)
**************************************************************************)
**************************************************************************)
Value indicating no checkpoint lease.                                   *)
**************************************************************************)
**************************************************************************)
Reads the value from the index of the node's log.                       *)
**************************************************************************)
**************************************************************************)
Writes the value to the index of the node's log.                        *)
**************************************************************************)
**************************************************************************)
Merges the logs of two replicas. Replica logs can differ if one was     *)
unable to receive messages from the leader. While replica logs can be   *)
missing values, they will never have conflicting values for any index.  *)
**************************************************************************)
**************************************************************************)
The set of all unused log indices.                                      *)
**************************************************************************)
**************************************************************************)
Finds the first unused replicated log index.                            *)
**************************************************************************)
**************************************************************************)
The type invariant of all variables.                                    *)
**************************************************************************)
**************************************************************************)
Safety checks which must hold in all states for the system to be        *)
considered functional.                                                  *)
**************************************************************************)
**************************************************************************)
Expectations about system capabilities.                                 *)
**************************************************************************)
**************************************************************************)
Whether the dst node will receive a message from the src node.          *)
**************************************************************************)
**************************************************************************)
Whether the two nodes can talk to one another.                          *)
**************************************************************************)
**************************************************************************)
Whether we have quorum from the given prospective leader node.          *)
**************************************************************************)
**************************************************************************)
Whether we have a leader and that leader has quorum.                    *)
**************************************************************************)
**************************************************************************)
A node fails, losing all volatile local state.                          *)
**************************************************************************)
**************************************************************************)
A node recovers. State is first rehydrated from the last checkpoint,    *)
with the node's locally-persisted log filling in any gaps after that.   *)
**************************************************************************)
**************************************************************************)
A network link between two nodes fails in one direction.                *)
**************************************************************************)
**************************************************************************)
A network link between two nodes recovers.                              *)
**************************************************************************)
**************************************************************************)
Elects a new leader if one is not currently elected.                    *)
We can safely assume nodes currently taking a backup are excluded from  *)
the leader election process, because their state is too far behind.     *)
The leader is required to be completely caught up, and thus cannot have *)
any unprocessed replicated requests.                                    *)
**************************************************************************)
**************************************************************************)
Critical logic determining whether we should replace the current lease. *)
**************************************************************************)
**************************************************************************)
The leader designates an arbitrary node to take a checkpoint. This is   *)
done by sending a replicated request to all nodes in the quorum. The    *)
request contains the node selected to perform a checkpoint.             *)
**************************************************************************)
**************************************************************************)
Propagates chosen values to a node which might have missed them.        *)
**************************************************************************)
**************************************************************************)
The node processes a replicated request. If the request specifies the   *)
node processing the request, and the node is not currently leader, then *)
the node marks itself as able to take a checkpoint.                     *)
**************************************************************************)
**************************************************************************)
A node begins a checkpoint if it believes it is able.                   *)
**************************************************************************)
**************************************************************************)
Completes a checkpoint successfully.                                    *)
**************************************************************************)
**************************************************************************)
Increments the timeout counter; while in a real-world system we can't   *)
expect every node to have its local time flow at the same rate, the     *)
specific system being modeled will drop a node from the replica set if  *)
its time dilation is beyond a small margin relative to the primary.     *)
**************************************************************************)
**************************************************************************)
The initial system state. All nodes healthy, log is blank.              *)
**************************************************************************)
**************************************************************************)
The next-state relation.                                                *)
**************************************************************************)
**************************************************************************)
Assumptions that good things eventually happen.                         *)
**************************************************************************)
**************************************************************************)
The spec, defining the set of all system behaviours.                    *)
**************************************************************************)
**************************************************************************)
Want to show: the set of all behaviours satisfies our requirements.     *)
**************************************************************************)